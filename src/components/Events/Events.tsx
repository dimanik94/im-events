/** @jsxImportSource @emotion/react */
import { FC, useEffect, useState } from "react";
import { filter, isUndefined, map } from "lodash";
import Event from "../Event/Event";
// import { Spin } from "antd";

export type TEvent = {
  name: string;
  type: string;
};

export const iconsByType = {
  CORPORATE: (
    <svg
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M4.14364 6.24452H1V17.2507H4.14364V6.24452Z"
        fill="currentColor"
      />
      <path
        d="M16.8904 17.2508H13.7904V11.3586C13.7904 9.75767 13.172 8.95722 11.935 8.95722C11.3381 8.95722 10.8652 9.19438 10.5161 9.66873C10.1666 10.143 9.99193 10.7138 9.99193 11.3808V17.2508H6.84859V6.2668H9.59912L9.81752 7.51196C10.3705 6.51879 11.3162 6.02222 12.6554 6.02222C14.1541 6.02222 15.2021 6.70409 15.7987 8.06783C16.2789 7.32665 16.7958 6.80042 17.3487 6.48915C17.9017 6.16305 18.5784 6 19.3789 6C20.6595 6 21.6929 6.40021 22.4788 7.20066C23.279 8.00111 23.6794 9.35001 23.6794 11.2474V17.2508H20.5139V11.3141C20.5139 9.78731 19.9682 9.02391 18.8769 9.02391C18.2802 9.02391 17.7998 9.25365 17.4361 9.7132C17.0721 10.1579 16.8904 10.7063 16.8904 11.3586V17.2508Z"
        fill="currentColor"
      />
    </svg>
  ),
  SPORT: (
    <svg
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M12 2.25C6.62344 2.25 2.25 6.62344 2.25 12C2.25 17.3766 6.62344 21.75 12 21.75C17.3766 21.75 21.75 17.3766 21.75 12C21.75 6.62344 17.3766 2.25 12 2.25ZM18.4477 6.74531C19.6078 8.16328 20.3109 9.96797 20.3273 11.9344C20.0531 11.8758 17.2992 11.318 14.5289 11.6672C14.4703 11.5242 14.4117 11.3813 14.3508 11.2383C14.1773 10.8328 13.9922 10.4273 13.7977 10.0312C16.875 8.77266 18.2719 6.98437 18.4477 6.74531ZM12 3.68437C14.1164 3.68437 16.05 4.47891 17.5195 5.78203C17.3695 5.99531 16.1156 7.68047 13.1555 8.79141C11.7914 6.28359 10.2797 4.22578 10.0477 3.91641C10.6875 3.76172 11.3414 3.68437 12 3.68437ZM8.45859 4.47656C8.67891 4.77656 10.1672 6.84141 11.5453 9.29297C7.65 10.3266 4.21875 10.3125 3.84609 10.3078C4.3875 7.72266 6.12891 5.57578 8.45859 4.47656ZM3.67266 12.0117C3.67266 11.9273 3.675 11.8406 3.67734 11.7563C4.04062 11.7633 8.07656 11.8148 12.2367 10.5703C12.4758 11.0367 12.7031 11.5102 12.9117 11.9836C12.8016 12.0141 12.6914 12.0469 12.5836 12.082C8.2875 13.4742 6.00234 17.2594 5.8125 17.5805C4.48359 16.1039 3.67266 14.1516 3.67266 12.0117ZM12 20.3391C10.0734 20.3391 8.29922 19.6828 6.88828 18.5812C7.03828 18.2742 8.72344 15.0188 13.4203 13.3805L13.4742 13.3617C14.6438 16.3992 15.1266 18.9469 15.2508 19.6781C14.2234 20.1172 13.1173 20.3421 12 20.3391ZM16.6523 18.9164C16.568 18.4102 16.125 15.9727 15.0352 12.9797C17.6461 12.5625 19.9383 13.2469 20.2219 13.3359C19.8516 15.6516 18.5227 17.6531 16.6523 18.9164Z"
        fill="currentColor"
      />
    </svg>
  ),
  INTELLECTUAL: (
    <svg
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M14.8125 20.8125H9.1875C9.08437 20.8125 9 20.8969 9 21V21.75C9 22.1648 9.33516 22.5 9.75 22.5H14.25C14.6648 22.5 15 22.1648 15 21.75V21C15 20.8969 14.9156 20.8125 14.8125 20.8125ZM12 1.5C7.75547 1.5 4.3125 4.94297 4.3125 9.1875C4.3125 12.0328 5.85938 14.5172 8.15625 15.8461V18.5625C8.15625 18.9773 8.49141 19.3125 8.90625 19.3125H15.0938C15.5086 19.3125 15.8438 18.9773 15.8438 18.5625V15.8461C18.1406 14.5172 19.6875 12.0328 19.6875 9.1875C19.6875 4.94297 16.2445 1.5 12 1.5ZM14.9977 14.3859L14.1562 14.8734V17.625H9.84375V14.8734L9.00234 14.3859C7.15781 13.3195 6 11.3555 6 9.1875C6 5.87344 8.68594 3.1875 12 3.1875C15.3141 3.1875 18 5.87344 18 9.1875C18 11.3555 16.8422 13.3195 14.9977 14.3859Z"
        fill="currentColor"
      />
    </svg>
  ),
  NOT_FORMAL: (
    <svg
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M20.9061 18.0937H19.0311V16.2187C19.0311 16.1156 18.9467 16.0312 18.8436 16.0312H17.7186C17.6155 16.0312 17.5311 16.1156 17.5311 16.2187V18.0937H15.6561C15.553 18.0937 15.4686 18.1781 15.4686 18.2812V19.4062C15.4686 19.5093 15.553 19.5937 15.6561 19.5937H17.5311V21.4687C17.5311 21.5718 17.6155 21.6562 17.7186 21.6562H18.8436C18.9467 21.6562 19.0311 21.5718 19.0311 21.4687V19.5937H20.9061C21.0092 19.5937 21.0936 19.5093 21.0936 19.4062V18.2812C21.0936 18.1781 21.0092 18.0937 20.9061 18.0937ZM8.75376 11.6812C8.73266 11.4773 8.72094 11.271 8.72094 11.0624C8.72094 10.6898 8.7561 10.3265 8.82173 9.9726C8.83813 9.88822 8.7936 9.8015 8.71626 9.76635C8.39751 9.62338 8.10454 9.4265 7.85141 9.17806C7.55315 8.88886 7.31844 8.54066 7.16227 8.15568C7.0061 7.7707 6.93189 7.35739 6.94438 6.94213C6.96548 6.18978 7.26782 5.47494 7.79516 4.93588C8.37407 4.34291 9.15219 4.01947 9.97954 4.02885C10.7272 4.03588 11.4491 4.32416 11.9952 4.8351C12.1803 5.00853 12.3397 5.20072 12.4733 5.40697C12.5202 5.47963 12.6116 5.5101 12.6913 5.48197C13.1038 5.339 13.5397 5.23822 13.9874 5.19135C14.1186 5.17728 14.1936 5.03666 14.135 4.91947C13.3733 3.41244 11.817 2.37181 10.017 2.34369C7.42016 2.30385 5.25454 4.43431 5.25454 7.03119C5.25454 8.50306 5.93188 9.81556 6.9936 10.6757C6.24829 11.0203 5.56157 11.496 4.96626 12.0913C3.68188 13.3734 2.95532 15.0656 2.90844 16.8726C2.90782 16.8976 2.91221 16.9225 2.92135 16.9458C2.93049 16.9691 2.9442 16.9903 2.96168 17.0082C2.97915 17.0261 3.00003 17.0404 3.02309 17.0501C3.04615 17.0598 3.07092 17.0648 3.09595 17.0648H4.41079C4.51157 17.0648 4.59594 16.9851 4.59829 16.8843C4.64282 15.5249 5.1936 14.2523 6.16157 13.2867C6.85063 12.5976 7.69438 12.1195 8.61548 11.8874C8.70454 11.8617 8.76548 11.7749 8.75376 11.6812ZM19.3124 11.0624C19.3124 8.49838 17.2522 6.41478 14.6975 6.37494C12.1006 6.3351 9.93735 8.46556 9.93735 11.0624C9.93735 12.5343 10.617 13.8468 11.6764 14.707C10.9234 15.056 10.2379 15.5353 9.65141 16.1226C8.36704 17.4046 7.64048 19.0968 7.5936 20.9015C7.59298 20.9265 7.59736 20.9514 7.60651 20.9747C7.61565 20.998 7.62936 21.0192 7.64683 21.0371C7.66431 21.055 7.68519 21.0693 7.70825 21.079C7.73131 21.0887 7.75608 21.0937 7.7811 21.0937H9.0936C9.19438 21.0937 9.27876 21.014 9.2811 20.9132C9.32563 19.5538 9.87641 18.2812 10.8444 17.3156C11.8545 16.3054 13.1952 15.7499 14.6249 15.7499C17.2124 15.7499 19.3124 13.6523 19.3124 11.0624ZM16.7459 13.1835C16.1788 13.7507 15.4264 14.0624 14.6249 14.0624C13.8233 14.0624 13.0709 13.7507 12.5038 13.1835C12.2207 12.902 11.9971 12.5665 11.8461 12.1969C11.6951 11.8273 11.6199 11.4312 11.6249 11.032C11.6319 10.2632 11.9389 9.52025 12.4756 8.96947C13.0381 8.39291 13.7905 8.07181 14.5944 8.06244C15.3889 8.05541 16.16 8.36478 16.7272 8.92025C17.3084 9.48978 17.6272 10.2515 17.6272 11.0624C17.6249 11.864 17.3131 12.6163 16.7459 13.1835Z"
        fill="currentColor"
      />
    </svg>
  ),
  OTHER: (
    <svg
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M6.5 6.44995C6.22386 6.44995 6 6.67381 6 6.94995V7.64995C6 7.92609 6.22386 8.14995 6.5 8.14995H17.5C17.7761 8.14995 18 7.92609 18 7.64995V6.94995C18 6.67381 17.7761 6.44995 17.5 6.44995H6.5Z"
        fill="currentColor"
      />
      <path
        d="M6 11.65C6 11.3739 6.22386 11.15 6.5 11.15H17.5C17.7761 11.15 18 11.3739 18 11.65V12.35C18 12.6262 17.7761 12.85 17.5 12.85H6.5C6.22386 12.85 6 12.6262 6 12.35V11.65Z"
        fill="currentColor"
      />
      <path
        d="M6.5 15.85C6.22386 15.85 6 16.0738 6 16.35V17.05C6 17.3261 6.22386 17.55 6.5 17.55H17.5C17.7761 17.55 18 17.3261 18 17.05V16.35C18 16.0738 17.7761 15.85 17.5 15.85H6.5Z"
        fill="currentColor"
      />
      <path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M2 4C2 2.89543 2.89543 2 4 2H20C21.1046 2 22 2.89543 22 4V20C22 21.1046 21.1046 22 20 22H4C2.89543 22 2 21.1046 2 20V4ZM4 3.7H20C20.1657 3.7 20.3 3.83432 20.3 4V20C20.3 20.1657 20.1657 20.3 20 20.3H4C3.83431 20.3 3.7 20.1657 3.7 20V4C3.7 3.83431 3.83432 3.7 4 3.7Z"
        fill="currentColor"
      />
    </svg>
  ),
};

const events1: TEvent[] = [
  {
    name: "ЧКГ",
    type: "INTELLECTUAL",
  },
  {
    name: "Корпоратив",
    type: "CORPORATE",
  },
  {
    name: "Сплав",
    type: "NOT_FORMAL",
  },
  {
    name: "Футбол",
    type: "SPORT",
  },
  {
    name: "Хоккей",
    type: "SPORT",
  },
  {
    name: "Другие",
    type: "OTHER",
  },
];

const Events: FC = () => {
  const [events, setEvents] = useState<TEvent[]>();
  const [currentType, setCurrentType] = useState<string>();

  useEffect(() => {
    async function fetchData() {
      fetch("http://192.168.89.79:8080/events/all").then((body) => {
        body.json().then((res) => {
          setEvents(res);
        });
      });
    }

    fetchData();
  }, []);

  // if (!events) {
  //   return (
  //     <Spin
  //       css={{
  //         position: "absolute",
  //         top: "50%",
  //         left: "50%",
  //         transform: "translate(-50%, -50%)",
  //       }}
  //     />
  //   );
  // }

  return (
    <div>
      <div
        css={{
          padding: "4px 8px 0px 8px",
          borderBottom: "1px solid #f0f0f0",
          display: "flex",
        }}
      >
        {map(
          ["CORPORATE", "SPORT", "INTELLECTUAL", "NOT_FORMAL", "OTHER"],
          (type: keyof typeof iconsByType, index) => {
            const Icon = iconsByType[type];

            return (
              <div
                css={{
                  width: 36,
                  height: 36,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  cursor: "pointer",
                  color: currentType === type ? "#0cb3b3" : undefined,
                  boxShadow:
                    currentType === type
                      ? "rgb(12 179 179) 0px -2px 0px inset"
                      : undefined,
                }}
                onClick={() => {
                  setCurrentType(type === currentType ? undefined : type);
                }}
              >
                {Icon}
              </div>
            );
          }
        )}
      </div>
      <div css={{ padding: "4px 8px" }}>
        {map(
          filter(events1, (filteredEvent) => {
            if (isUndefined(currentType)) {
              return true;
            }

            return filteredEvent.type === currentType;
          }),
          (event) => (
            <Event key={event.name} event={event} />
          )
        )}
      </div>
    </div>
  );
};

export default Events;
